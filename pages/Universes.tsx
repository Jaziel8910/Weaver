import React, { useContext, useState } from 'react';
import { Globe, PlusCircle, Feather, BrainCircuit } from 'lucide-react';
import { AppContext } from '../contexts/AppContext';
import type { Universe } from '../types';
import { useTranslation } from '../App';
import { generateUniverseFromFranchise } from '../services/geminiService';
import Spinner from '../components/Spinner';

const UniverseCard: React.FC<{universe: Universe; onClick: () => void}> = ({ universe, onClick }) => {
    const storyCount = universe.storyIds.length;
    return (
        <div className="bg-gray-800 rounded-lg p-6 cursor-pointer group transform hover:-translate-y-1 transition-all duration-300 shadow-lg" onClick={onClick}>
            <div className="flex items-center mb-3">
                <Globe className="text-primary-500 mr-3 flex-shrink-0" size={24}/>
                <h3 className="font-bold text-xl text-white truncate group-hover:text-primary-500">{universe.name}</h3>
            </div>
            <p className="text-sm text-gray-400 line-clamp-2 h-10">{universe.description}</p>
            <p className="text-xs text-gray-500 mt-4">{storyCount} {storyCount === 1 ? 'story' : 'stories'}</p>
        </div>
    );
}


const CreateUniverseModal: React.FC<{
    isOpen: boolean;
    onClose: () => void;
    addUniverse: (universe: Universe) => void;
}> = ({ isOpen, onClose, addUniverse }) => {
    const { t } = useTranslation();
    const [mode, setMode] = useState<'scratch' | 'franchise'>('scratch');
    
    // Scratch mode state
    const [name, setName] = useState('');
    const [description, setDescription] = useState('');
    const [rules, setRules] = useState('');

    // Franchise mode state
    const [franchiseName, setFranchiseName] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState('');

    if (!isOpen) return null;

    const handleCreateFromScratch = (e: React.FormEvent) => {
        e.preventDefault();
        if (!name.trim()) return;

        const newUniverse: Universe = {
            id: `uni-${Date.now()}-${Math.random()}`,
            name,
            description,
            rules: rules.split('\n').filter(r => r.trim()),
            timeline: 'A new timeline begins...',
            storyIds: [],
            characters: [],
        };
        addUniverse(newUniverse);
        onClose();
    };

    const handleCreateFromFranchise = async (e: React.FormEvent) => {
        e.preventDefault();
        if (!franchiseName.trim()) return;
        setIsLoading(true);
        setError('');
        try {
            const generatedData = await generateUniverseFromFranchise(franchiseName);
            const newUniverse: Universe = {
                id: `uni-${Date.now()}-${Math.random()}`,
                name: franchiseName,
                description: generatedData.description || `The universe of ${franchiseName}`,
                rules: generatedData.rules || [],
                timeline: 'Generated by AI. Explore stories to expand the timeline.',
                storyIds: [],
                characters: generatedData.characters || [],
            };
            addUniverse(newUniverse);
            onClose();
        } catch (err: any) {
            setError(err.message || 'An unknown error occurred.');
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div className="fixed inset-0 bg-black/60 z-50 flex items-center justify-center p-4 animate-fade-in">
            <div className="bg-gray-800 rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] flex flex-col">
                <h2 className="text-2xl font-bold p-6 border-b border-gray-700">{t('createNewUniverse')}</h2>
                <div className="border-b border-gray-700 px-6">
                    <nav className="-mb-px flex space-x-6">
                        <button onClick={() => setMode('scratch')} className={`${mode === 'scratch' ? 'border-primary-500 text-primary-500' : 'border-transparent text-gray-400 hover:text-white'} flex items-center whitespace-nowrap py-3 px-1 border-b-2 font-medium`}>
                           <Feather size={18} className="mr-2"/> Create from Scratch
                        </button>
                        <button onClick={() => setMode('franchise')} className={`${mode === 'franchise' ? 'border-primary-500 text-primary-500' : 'border-transparent text-gray-400 hover:text-white'} flex items-center whitespace-nowrap py-3 px-1 border-b-2 font-medium`}>
                           <BrainCircuit size={18} className="mr-2"/> Create from Franchise
                        </button>
                    </nav>
                </div>

                {mode === 'scratch' ? (
                    <form onSubmit={handleCreateFromScratch} className="flex-1 overflow-y-auto">
                        <div className="p-6 space-y-4">
                            <h3 className="text-lg font-semibold text-white">Core Concept</h3>
                            <div>
                                <label className="block text-sm font-medium text-gray-300 mb-1">{t('universeName')}</label>
                                <input type="text" value={name} onChange={e => setName(e.target.value)} className="w-full bg-gray-700 border border-gray-600 rounded-lg p-2" required />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-300 mb-1">{t('universeDescription')}</label>
                                <textarea value={description} onChange={e => setDescription(e.target.value)} className="w-full bg-gray-700 border border-gray-600 rounded-lg p-2" rows={3}></textarea>
                            </div>
                             <h3 className="text-lg font-semibold text-white pt-2">World Details</h3>
                             <div>
                                <label className="block text-sm font-medium text-gray-300 mb-1">{t('rules')}</label>
                                <textarea value={rules} onChange={e => setRules(e.target.value)} className="w-full bg-gray-700 border border-gray-600 rounded-lg p-2" rows={4} placeholder={t('rulesPlaceholder')}></textarea>
                            </div>
                        </div>
                        <div className="p-6 border-t border-gray-700 flex justify-end gap-4 sticky bottom-0 bg-gray-800">
                            <button type="button" onClick={onClose} className="px-4 py-2 rounded-md bg-gray-600 hover:bg-gray-500">{t('cancel')}</button>
                            <button type="submit" className="px-4 py-2 rounded-md bg-primary-600 hover:bg-primary-700 text-white">Create Universe</button>
                        </div>
                    </form>
                ) : (
                    <form onSubmit={handleCreateFromFranchise} className="flex-1 overflow-y-auto">
                        <div className="p-6 space-y-4">
                            <p className="text-gray-400">Enter the name of a well-known franchise (like a book series, movie, or video game). Gemini will use Google Search to find information and automatically build a starter universe for you, including core rules and key characters.</p>
                            <div>
                                <label className="block text-sm font-medium text-gray-300 mb-1">{t('franchise')}</label>
                                <input type="text" value={franchiseName} onChange={e => setFranchiseName(e.target.value)} className="w-full bg-gray-700 border border-gray-600 rounded-lg p-2" placeholder="e.g., The Lord of the Rings, Star Wars, Harry Potter" required />
                            </div>
                            {error && <p className="text-red-400 text-sm bg-red-500/10 p-3 rounded-md">{error}</p>}
                            {isLoading && (
                                <div className="flex flex-col items-center justify-center p-8 text-center">
                                    <Spinner size={12} />
                                    <p className="mt-4 text-gray-300">Gemini is exploring the multiverse...</p>
                                    <p className="text-sm text-gray-500">This may take a moment.</p>
                                </div>
                            )}
                        </div>
                         <div className="p-6 border-t border-gray-700 flex justify-end gap-4 sticky bottom-0 bg-gray-800">
                            <button type="button" onClick={onClose} className="px-4 py-2 rounded-md bg-gray-600 hover:bg-gray-500">{t('cancel')}</button>
                            <button type="submit" disabled={isLoading} className="px-4 py-2 rounded-md bg-primary-600 hover:bg-primary-700 text-white disabled:opacity-50 disabled:cursor-wait">
                                {isLoading ? 'Generating...' : 'Generate Universe'}
                            </button>
                        </div>
                    </form>
                )}
            </div>
        </div>
    );
};


const Universes: React.FC = () => {
  const { universes, viewUniverse, addUniverse, startStoryInUniverse } = useContext(AppContext);
  const { t } = useTranslation();
  
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [successModalData, setSuccessModalData] = useState<{id: string, name: string} | null>(null);

  const handleAddUniverse = (newUniverse: Universe) => {
    addUniverse(newUniverse);
    setIsCreateModalOpen(false);
    setSuccessModalData({ id: newUniverse.id, name: newUniverse.name });
  };

  const handleCreateStoryFromSuccess = () => {
    if (successModalData) {
      startStoryInUniverse(successModalData.id);
      setSuccessModalData(null);
    }
  };

  return (
    <>
      <CreateUniverseModal 
        isOpen={isCreateModalOpen}
        onClose={() => setIsCreateModalOpen(false)}
        addUniverse={handleAddUniverse}
      />

      {successModalData && (
         <div className="fixed inset-0 bg-black/60 z-50 flex items-center justify-center p-4 animate-fade-in">
            <div className="bg-gray-800 rounded-lg shadow-xl w-full max-w-md text-center p-8">
                <Globe size={48} className="mx-auto text-green-400 mb-4" />
                <h2 className="text-2xl font-bold text-white mb-2">{t('universeCreatedSuccess', { universeName: successModalData.name })}</h2>
                <p className="text-gray-400 mb-6">{t('promptCreateFirstStory')}</p>
                <div className="flex justify-center gap-4">
                    <button onClick={() => setSuccessModalData(null)} className="px-6 py-2 rounded-md bg-gray-600 hover:bg-gray-500">{t('notNow')}</button>
                    <button onClick={handleCreateStoryFromSuccess} className="px-6 py-2 rounded-md bg-primary-600 hover:bg-primary-700 text-white">{t('createStory')}</button>
                </div>
            </div>
        </div>
      )}

      <div className="p-8 h-full">
        <header className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-4xl font-bold text-white">{t('universes')}</h1>
            <p className="text-gray-400 mt-2">Manage your story canons, timelines, and crossovers.</p>
          </div>
          <button 
              onClick={() => setIsCreateModalOpen(true)}
              className="bg-primary-500 hover:bg-primary-600 text-white font-bold py-2 px-4 rounded-lg flex items-center transition-transform duration-200 hover:scale-105"
          >
              <PlusCircle size={20} className="mr-2" />
              {t('createNewUniverse')}
          </button>
        </header>
        
        {universes.length > 0 ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {universes.map(universe => (
                <UniverseCard key={universe.id} universe={universe} onClick={() => viewUniverse(universe.id)} />
              ))}
            </div>
        ) : (
          <div className="flex flex-col items-center justify-center text-center text-gray-500 mt-20">
              <Globe size={64} className="mb-4"/>
              <h2 className="text-xl font-semibold">No Universes Found</h2>
              <p>Create a story or use the button above to build your first universe.</p>
          </div>
        )}
      </div>
    </>
  );
};

export default Universes;